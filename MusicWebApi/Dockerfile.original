# Stage 1: Build the application
# Using the .NET 9 SDK image
FROM mcr.microsoft.com/dotnet/sdk:9.0 AS build
WORKDIR /src

# Copy the project file and restore dependencies
# Copying the .csproj and restoring as a separate layer benefits from Docker's caching.
COPY *.csproj .
RUN dotnet restore

# Copy the rest of the application code
COPY . .

# Publish the application
# Replace 'YourProject.csproj' with the actual name of your project file
# Adjust the output path if necessary
RUN dotnet publish -c Release -o /app/publish MusicWebApi.csproj

# Stage 2: Create the runtime image
# Using the ASP.NET Core runtime image for .NET 9
# Use mcr.microsoft.com/dotnet/runtime:9.0 if it's not an ASP.NET Core app
FROM mcr.microsoft.com/dotnet/aspnet:9.0 AS final
WORKDIR /app

# Copy the published output from the build stage
COPY --from=build /app/publish .

# Expose the port the app runs on (update if your app uses a different port)
EXPOSE 8080
# For HTTPS, you might also expose 8081 or 443, depending on your configuration.

# Define the entry point for the container.
# Replace 'YourProject.dll' with the actual name of your application's DLL.
ENTRYPOINT ["dotnet", "MusicWebApi.dll"]

# Optional: Set environment variables
# ENV ASPNETCORE_URLS=http://+:8080
# ENV DOTNET_RUNNING_IN_CONTAINER=true